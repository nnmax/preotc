# name: build & deploy to PROD environment

# on:
#   workflow_dispatch:
#   push:
#     tags:
#       - v[0-9].[0-9]+.[0-9]+

# env:
#   AWS_REGION: us-west-2
#   ECR_REPOSITORY: website
#   ECS_SERVICE: website
#   ECS_CLUSTER: flip-god
#   ECS_TASK_DEFINITION: .aws/ecs/task-definition.json
#   CONTAINER_NAME: app
#   NEXT_PUBLIC_API_TARGET: https://apis.flipgod.xyz
#   NEXT_PUBLIC_WEB_SOCKET: wss://events.flipgod.xyz

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@5a88a04c91d5c6f97aae0d9be790e64d9b1d47b7 # v1.7.1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#           NEXT_PUBLIC_API_TARGET: ${{env.NEXT_PUBLIC_API_TARGET}}
#           NEXT_PUBLIC_WEB_SOCKET: ${{env.NEXT_PUBLIC_WEB_SOCKET}}
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build --build-arg NEXT_PUBLIC_API_TARGET --build-arg NEXT_PUBLIC_WEB_SOCKET -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@61b0c00c3743b70987a73a1faf577f0d167d1574 # v1.1.3
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a # v1.4.11
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
